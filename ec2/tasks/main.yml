---
# tasks file for ec2
- name: get subnet ID
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    filters:
      "tag:Environment": "{{ env }}"
  register: subnetinfo
- name: Display subnetinfo
  debug: var="subnetinfo.subnets[0].subnet_id"
- name: get vpc ID
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    filters:
      "tag:Environment": "{{ env }}"
  register: vpcinfo
- name: Display vpcinfo
  debug: var="vpcinfo.subnets[0].vpc_id"
- name: get the AMI id
  shell: aws ec2 describe-images --filters "Name=owner-id,Values=099720109477" "Name=name,Values=ubuntu*" "Name=virtualization-type,Values=hvm" --region {{ region }} --query 'Images[*].{ID:ImageId,N:Name}' | grep -B 1 'hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180627' | sed  '1!d' | sed 's/\"//g' | sed 's/\,//g' | awk '{print $2}'
  register: amiid
- name: create key pair using provided key_material
  ec2_key:
    name: bastion-key
    key_material: "{{ pub_key }}"
    #key_material: "{{ lookup('file', '/Users/jayagopal.reddy/.ssh/id_rsa.pub') }}"
- name: example using security group rule descriptions
  ec2_group:
    name: bastion-sg
    description: bastion-sg
    vpc_id: "{{ subnetinfo.subnets[0].vpc_id }}"
    rules:
      - proto: tcp
        ports:
          - 22
          - 1922
          - 25
        cidr_ip: "{{ IP }}"
        rule_desc: Minjar IP
  register: bastion_sg
- name: Launch Instance
  ec2:
    key_name: bastion-key
    group: [ "bastion-sg" ]
    instance_type: "{{ instance_type }}"
    image: "{{ amiid.stdout }}"
    user_data: "{{ lookup('file', '/etc/ansible/role/user_data.sh') }}"
    wait: yes
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: "{{ ebs_size }}"
        delete_on_termination: yes
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnetinfo.subnets[0].subnet_id }}"
    assign_public_ip: yes
    count: 1
    instance_tags:
        Name: Bastion-test
        Team: Nutanix
  register: ec2
- name: Add new Instance to host group
  add_host: 
    name={{ item.public_ip }} 
    groups= bastion
  with_items: "{{ ec2.instances }}"
- name: Wait for SSH to come up
  wait_for:
    host={{ item.public_ip }}
    port=22
    delay=60 
    timeout=320 
    state=started
  with_items: "{{ ec2.instances }}"
